// generated from rosidl_adapter/resource/msg.idl.em
// with input from rover_control/msg/DriveCommand.msg
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Twist.idl"
#include "std_msgs/msg/Header.idl"

module rover_control {
  module msg {
    @verbatim (language="comment", text=
      "=============================================================================" "\n"
      "DRIVE COMMAND MESSAGE" "\n"
      "=============================================================================" "\n"
      "Low-level drive command message for rover movement control." "\n"
      "Used internally by action servers and path followers." "\n"
      "=============================================================================")
    struct DriveCommand {
      @verbatim (language="comment", text=
        "Header")
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "Basic movement command" "\n"
        "Target linear and angular velocity")
      geometry_msgs::msg::Twist velocity;

      @verbatim (language="comment", text=
        "Target acceleration (m/s²)")
      float acceleration;

      @verbatim (language="comment", text=
        "Command duration (seconds, 0 = continuous)")
      float duration;

      @verbatim (language="comment", text=
        "Control mode" "\n"
        "\"velocity\", \"position\", \"trajectory\"")
      string control_mode;

      @verbatim (language="comment", text=
        "True if command is relative to current state")
      boolean relative_command;

      @verbatim (language="comment", text=
        "Safety and limits" "\n"
        "Maximum allowed velocity (m/s)")
      float max_velocity;

      @verbatim (language="comment", text=
        "Maximum allowed acceleration (m/s²)")
      float max_acceleration;

      @verbatim (language="comment", text=
        "Apply mission-specific safety limits")
      boolean enforce_safety_limits;

      @verbatim (language="comment", text=
        "Mission mode for parameter selection")
      string mission_mode;

      @verbatim (language="comment", text=
        "Advanced control" "\n"
        "Path curvature (1/radius in m⁻¹)")
      float curvature;

      @verbatim (language="comment", text=
        "Pure pursuit lookahead distance (m)")
      float lookahead_distance;

      @verbatim (language="comment", text=
        "Enable wheel slip compensation")
      boolean use_slip_compensation;

      @verbatim (language="comment", text=
        "Execution parameters" "\n"
        "Command priority (higher = more important)")
      int32 priority;

      @verbatim (language="comment", text=
        "Command timeout (seconds)")
      float timeout;

      @verbatim (language="comment", text=
        "Source of command (for logging)")
      string source;
    };
  };
};
