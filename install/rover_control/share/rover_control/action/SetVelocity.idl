// generated from rosidl_adapter/resource/action.idl.em
// with input from rover_control/action/SetVelocity.action
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Twist.idl"

module rover_control {
  module action {
    @verbatim (language="comment", text=
      "=============================================================================" "\n"
      "SET VELOCITY ACTION" "\n"
      "=============================================================================" "\n"
      "Action for direct velocity control of the rover. Used for teleoperation," "\n"
      "manual control, and precise movements with safety monitoring." "\n"
      "=============================================================================")
    struct SetVelocity_Goal {
      @verbatim (language="comment", text=
        "GOAL" "\n"
        "Target linear and angular velocity")
      geometry_msgs::msg::Twist target_velocity;

      @verbatim (language="comment", text=
        "Duration to maintain velocity (0 = indefinite)")
      @default (value=0.0)
      float duration;

      @verbatim (language="comment", text=
        "Maximum acceleration (m/sÂ²)")
      @default (value=1.0)
      float acceleration_limit;

      @verbatim (language="comment", text=
        "Safety timeout (seconds)")
      @default (value=10.0)
      float timeout;

      @verbatim (language="comment", text=
        "Mission mode for safety limits")
      @default (value="exploration")
      string mission_mode;

      @verbatim (language="comment", text=
        "Apply mission-specific velocity limits")
      @default (value=TRUE)
      boolean enforce_safety_limits;

      @verbatim (language="comment", text=
        "Gradually ramp to target velocity")
      @default (value=TRUE)
      boolean ramp_to_velocity;
    };
    struct SetVelocity_Result {
      @verbatim (language="comment", text=
        "RESULT" "\n"
        "True if velocity command executed successfully")
      boolean success;

      @verbatim (language="comment", text=
        "Structured result code (0=SUCCESS, 1=CANCELLED, etc.)")
      int32 result_code;

      @verbatim (language="comment", text=
        "Human-readable error description")
      string error_message;

      @verbatim (language="comment", text=
        "Time velocity was maintained (seconds)")
      float execution_time;

      @verbatim (language="comment", text=
        "Final velocity achieved")
      geometry_msgs::msg::Twist final_velocity;

      @verbatim (language="comment", text=
        "Maximum velocity reached during execution")
      geometry_msgs::msg::Twist max_velocity_reached;

      @verbatim (language="comment", text=
        "Distance traveled during execution (meters)")
      float distance_traveled;
    };
    struct SetVelocity_Feedback {
      @verbatim (language="comment", text=
        "FEEDBACK" "\n"
        "Current execution state (RAMPING, MAINTAINING, STOPPING)")
      string current_state;

      @verbatim (language="comment", text=
        "Current rover velocity")
      geometry_msgs::msg::Twist current_velocity;

      @verbatim (language="comment", text=
        "Time remaining (if duration specified)")
      float time_remaining;

      @verbatim (language="comment", text=
        "Progress to target velocity")
      @unit (value="0.0-100.0")
      float progress_percentage;

      @verbatim (language="comment", text=
        "Human-readable status update")
      string status_message;

      @verbatim (language="comment", text=
        "True if safety limits are constraining velocity")
      boolean safety_limit_active;

      @verbatim (language="comment", text=
        "Remaining autonomy timer (seconds)")
      float autonomy_time_remaining;
    };
  };
};
