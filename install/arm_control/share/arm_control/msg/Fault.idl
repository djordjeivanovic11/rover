// generated from rosidl_adapter/resource/msg.idl.em
// with input from arm_control/msg/Fault.msg
// generated code does not contain a copyright notice

#include "builtin_interfaces/msg/Duration.idl"
#include "geometry_msgs/msg/Point.idl"
#include "std_msgs/msg/Header.idl"

module arm_control {
  module msg {
    module Fault_Constants {
      @verbatim (language="comment", text=
        "Fault severity levels")
      const uint8 INFO = 0;
      const uint8 WARNING = 1;
      const uint8 ERROR = 2;
      const uint8 CRITICAL = 3;
      const uint8 EMERGENCY = 4;
    };
    @verbatim (language="comment", text=
      "=============================================================================" "\n"
      "FAULT MESSAGE" "\n"
      "=============================================================================" "\n"
      "Structured fault reporting for safety monitor and error recovery systems" "\n"
      "Provides detailed fault information for logging and automated response" "\n"
      "=============================================================================")
    struct Fault {
      @verbatim (language="comment", text=
        "Header for timestamp and frame information")
      std_msgs::msg::Header header;

      uint8 severity;

      @verbatim (language="comment", text=
        "Fault code (matches safety_params.yaml fault_codes)")
      uint32 fault_code;

      @verbatim (language="comment", text=
        "Fault category for filtering and handling" "\n"
        "\"JOINT\", \"FORCE_TORQUE\", \"ESTOP\", \"COMMUNICATION\", \"WORKSPACE\", \"SYSTEM\"")
      string fault_category;

      @verbatim (language="comment", text=
        "Descriptive information" "\n"
        "Human-readable fault description")
      string fault_description;

      @verbatim (language="comment", text=
        "Component that generated the fault")
      string component_name;

      @verbatim (language="comment", text=
        "Specific joint name (if applicable)")
      string joint_name;

      @verbatim (language="comment", text=
        "Fault data" "\n"
        "Measured value that caused fault")
      double fault_value;

      @verbatim (language="comment", text=
        "Threshold that was exceeded")
      double fault_threshold;

      @verbatim (language="comment", text=
        "Units for fault_value and fault_threshold")
      string fault_units;

      @verbatim (language="comment", text=
        "Spatial information" "\n"
        "3D location of fault (if spatial)")
      geometry_msgs::msg::Point fault_location;

      @verbatim (language="comment", text=
        "Reference frame for fault_location")
      string reference_frame;

      @verbatim (language="comment", text=
        "Recovery information" "\n"
        "True if fault can be automatically recovered")
      boolean auto_recoverable;

      @verbatim (language="comment", text=
        "True if recovery was attempted")
      boolean recovery_attempted;

      @verbatim (language="comment", text=
        "True if recovery was successful")
      boolean recovery_successful;

      @verbatim (language="comment", text=
        "Description of recovery action taken")
      string recovery_action;

      @verbatim (language="comment", text=
        "System state at fault time" "\n"
        "System state when fault occurred (from ArmStatus)")
      uint8 system_state;

      @verbatim (language="comment", text=
        "Action being executed when fault occurred")
      string current_action;

      @verbatim (language="comment", text=
        "Action progress when fault occurred")
      @unit (value="0.0-100.0")
      float action_progress;

      @verbatim (language="comment", text=
        "Additional context" "\n"
        "IDs of related/cascading faults")
      sequence<string> related_faults;

      @verbatim (language="comment", text=
        "Number of times this fault has occurred")
      uint32 occurrence_count;

      @verbatim (language="comment", text=
        "Time since last occurrence of this fault type")
      builtin_interfaces::msg::Duration time_since_last;

      @verbatim (language="comment", text=
        "Operator guidance" "\n"
        "Recommended operator action")
      string recommended_action;

      @verbatim (language="comment", text=
        "Level of intervention needed")
      uint8 operator_intervention_required;

      @verbatim (language="comment", text=
        "Additional troubleshooting information")
      string troubleshooting_info;
    };
  };
};
