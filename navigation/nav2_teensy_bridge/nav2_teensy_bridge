import sys, math
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import serial

PORT = "/dev/ttyACM0"
BAUD = 115200

def clamp(v, lo, hi): 
    return lo if v < lo else hi if v > hi else v

class CmdVelSerial(Node):
    def __init__(self):
        super().__init__('cmdvel_serial_bridge')
        self.sub = self.create_subscription(Twist, '/cmd_vel', self.on_cmd, 10)
        try:
            self.ser = serial.Serial(PORT, BAUD, timeout=0.1)
            self.get_logger().info(f"Opened serial {PORT} @ {BAUD}")
        except Exception as e:
            self.get_logger().error(f"Failed to open serial {PORT}: {e}")
            sys.exit(1)

    def on_cmd(self, msg: Twist):
        lin = float(msg.linear.x)
        ang = float(msg.angular.z)

        V_MAX = 0.6
        W_MAX = 1.8
        lin = clamp(msg.linear.x / V_MAX, -1.0, 1.0)
        ang = clamp(msg.angular.z / W_MAX, -1.0, 1.0)


        to_i16 = lambda v: int(clamp(round(v * 32767), -32768, 32767))

        y_val = to_i16(lin)
        x_val = to_i16(ang) 

        try:
            self.ser.write(f"x{x_val}\n".encode('ascii'))
            self.ser.write(f"y{y_val}\n".encode('ascii'))
        except Exception as e:
            self.get_logger().warning(f"Serial write failed: {e}")

def main():
    rclpy.init()
    node = CmdVelSerial()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
